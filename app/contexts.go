// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "user": Application Contexts
//
// Command:
// $ goagen
// --design=goa-user/design
// --out=$(GOPATH)/src/goa-user
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// CreateUserUserContext provides the user CreateUser action context.
type CreateUserUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateUserUserPayload
}

// NewCreateUserUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller CreateUser action.
func NewCreateUserUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateUserUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateUserUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createUserUserPayload is the user CreateUser action payload.
type createUserUserPayload struct {
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// User name
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// Publicize creates CreateUserUserPayload from createUserUserPayload
func (payload *createUserUserPayload) Publicize() *CreateUserUserPayload {
	var pub CreateUserUserPayload
	if payload.Email != nil {
		pub.Email = payload.Email
	}
	if payload.Password != nil {
		pub.Password = payload.Password
	}
	if payload.Username != nil {
		pub.Username = payload.Username
	}
	return &pub
}

// CreateUserUserPayload is the user CreateUser action payload.
type CreateUserUserPayload struct {
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// User name
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateUserUserContext) OK(r *ExampleUser) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/example.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateUserUserContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// GetUserUserContext provides the user GetUser action context.
type GetUserUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewGetUserUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller GetUser action.
func NewGetUserUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetUserUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetUserUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetUserUserContext) OK(r *ExampleUser) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/example.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetUserUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
