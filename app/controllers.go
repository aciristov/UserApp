// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "user": Application Controllers
//
// Command:
// $ goagen
// --design=goa-user/design
// --out=$(GOPATH)/src/goa-user
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// UserController is the controller interface for the User actions.
type UserController interface {
	goa.Muxer
	CreateUser(*CreateUserUserContext) error
	GetUser(*GetUserUserContext) error
}

// MountUserController "mounts" a User resource controller on the given service.
func MountUserController(service *goa.Service, ctrl UserController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateUserUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateUserUserPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.CreateUser(rctx)
	}
	service.Mux.Handle("POST", "/user", ctrl.MuxHandler("CreateUser", h, unmarshalCreateUserUserPayload))
	service.LogInfo("mount", "ctrl", "User", "action", "CreateUser", "route", "POST /user")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetUserUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetUser(rctx)
	}
	service.Mux.Handle("GET", "/user/:userID", ctrl.MuxHandler("GetUser", h, nil))
	service.LogInfo("mount", "ctrl", "User", "action", "GetUser", "route", "GET /user/:userID")
}

// unmarshalCreateUserUserPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateUserUserPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createUserUserPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
