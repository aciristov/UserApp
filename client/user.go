// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "user": user Resource Client
//
// Command:
// $ goagen
// --design=goa-user/design
// --out=$(GOPATH)/src/goa-user
// --version=v1.2.0-dirty

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// CreateUserUserPayload is the user CreateUser action payload.
type CreateUserUserPayload struct {
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// User name
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// CreateUserUserPath computes a request path to the CreateUser action of user.
func CreateUserUserPath() string {

	return fmt.Sprintf("/user")
}

// Create user with POST method
func (c *Client) CreateUserUser(ctx context.Context, path string, payload *CreateUserUserPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateUserUserRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateUserUserRequest create the request corresponding to the CreateUser action endpoint of the user resource.
func (c *Client) NewCreateUserUserRequest(ctx context.Context, path string, payload *CreateUserUserPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// GetUserUserPath computes a request path to the GetUser action of user.
func GetUserUserPath(userID int) string {
	param0 := strconv.Itoa(userID)

	return fmt.Sprintf("/user/%s", param0)
}

// Returns user by ID
func (c *Client) GetUserUser(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetUserUserRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetUserUserRequest create the request corresponding to the GetUser action endpoint of the user resource.
func (c *Client) NewGetUserUserRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
